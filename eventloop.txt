//eventloop это является стеком, где хранятся все задачи, которые не вошли в синхронный поток выполнения.
//сначала выполняеться синхронный операции потом асинхроный 
//типы eventloop 
микрозадачи (then у промисов, а также Intersection Observer.)но callback function in promiss это синхронный
макрозадачи (XmlHTTPRequest, setTimeout и так далее.)
задачи отрисавки (задачи связанные с отрисовкой и обновлением контента страницы.)
node js 
Event Loop — это цикл событий, и он бесконечен до тех пор, пока есть что выполнять
node js architectur 
node js core library (javascript)
node js blindings (c++)
gooogle v8 (c++)libuv(c)eventloop
Для взаимодействия с операционной системой используется библиотека libuv, написанная на C; для компиляции кода JavaScript'a в машинный код используется движок Google V8, также есть Node.js Core library, где собраны модули для работы с сетевыми запросами, файловой системой и модуль для логирования. Чтобы всё это друг с другом взаимодействовало, написаны Node.js Bindings. Эти 4 компонента составляют саму структуру Node.js. Сам механизм Event Loop'a находится в libuv.
очередь eventloop
таймери  setTimeout и есть setInterval
i/o callback  функции, которые используются после запроса в базу данных или другой ресурс или на чтение/запись файла
ожиданине по сути, мы не можем влиять на фазу, только косвенно. Есть process.nextTick, 
опрос подготовка Здесь выполняется весь наш код
проверка В Node.js есть таймер setImmediate, его callback'и выполняются на этой фазе
калбэк close 

process.nextTick() il serra prioritere dan eventloop 

Многопоточность — модуль worker_threads
Многопоточность появилась в Node.js благодаря модулю worker_threads
модуль cluster
Ещё в Node.js есть модуль cluster, но он не поднимает потоки — он поднимает ещё несколько процессов. Масштабируемость приложения — его основная цель.
